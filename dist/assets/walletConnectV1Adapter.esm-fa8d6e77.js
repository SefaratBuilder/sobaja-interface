import{H as f,b as r,W as p,G as R,I as O,J as s,L as a,M as l,K as w,O as A,N as g,P,Q as S}from"./index-52a2ca78.js";import{B as b}from"./baseEvmAdapter.esm-18cf3284.js";import{WalletConnectProvider as C}from"./ethereumProvider.esm-d61a0d60.js";import"./baseControllers.esm-aa487116.js";import"./baseProvider.esm-472b2c12.js";const v=[{name:"Rainbow",chains:[f.EIP155],logo:"https://images.web3auth.io/login-rainbow.svg",mobile:{native:"rainbow:",universal:"https://rnbwapp.com"},desktop:{native:"",universal:""}},{name:"MetaMask",chains:[f.EIP155],logo:"https://images.web3auth.io/login-metamask.svg",mobile:{native:"metamask:",universal:"https://metamask.app.link"},desktop:{native:"",universal:""}}];function y(c,t){var e=Object.keys(c);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(c);t&&(n=n.filter(function(o){return Object.getOwnPropertyDescriptor(c,o).enumerable})),e.push.apply(e,n)}return e}function I(c){for(var t=1;t<arguments.length;t++){var e=arguments[t]!=null?arguments[t]:{};t%2?y(Object(e),!0).forEach(function(n){r(c,n,e[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(c,Object.getOwnPropertyDescriptors(e)):y(Object(e)).forEach(function(n){Object.defineProperty(c,n,Object.getOwnPropertyDescriptor(e,n))})}return c}class L extends b{constructor(){let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};super(t),r(this,"name",p.WALLET_CONNECT_V1),r(this,"adapterNamespace",R.EIP155),r(this,"currentChainNamespace",f.EIP155),r(this,"type",O.EXTERNAL),r(this,"adapterOptions",void 0),r(this,"status",s.NOT_READY),r(this,"adapterData",{uri:"",extensionAdapters:v}),r(this,"connector",null),r(this,"wcProvider",null),this.adapterOptions=I({},t)}get connected(){var t;return!!((t=this.connector)!==null&&t!==void 0&&t.connected)}get provider(){var t;return((t=this.wcProvider)===null||t===void 0?void 0:t.provider)||null}set provider(t){throw new Error("Not implemented")}async init(){let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};if(await super.init(),super.checkInitializationRequirements(),this.connector=this.getWalletConnectInstance(),this.wcProvider=new C({config:{chainConfig:this.chainConfig},connector:this.connector}),this.emit(a.READY,p.WALLET_CONNECT_V1),this.status=s.READY,l.debug("initializing wallet connect v1 adapter"),t.autoConnect)if(this.connected)try{this.rehydrated=!0,await this.onConnectHandler({accounts:this.connector.accounts,chainId:this.connector.chainId})}catch(e){l.error("wallet auto connect",e),this.emit(a.ERRORED,e)}else this.status=s.NOT_READY,this.emit(a.CACHE_CLEAR)}async connect(){if(super.checkConnectionRequirements(),!this.connector)throw w.notReady("Wallet adapter is not ready yet");if(this.connected)return await this.onConnectHandler({accounts:this.connector.accounts,chainId:this.connector.chainId}),this.provider;if(this.status!==s.CONNECTING){var t;if((t=this.adapterOptions.adapterSettings)!==null&&t!==void 0&&t.qrcodeModal){var e;this.connector=this.getWalletConnectInstance(),this.wcProvider=new C({config:{chainConfig:this.chainConfig,skipLookupNetwork:(e=this.adapterOptions.adapterSettings)===null||e===void 0?void 0:e.skipNetworkSwitching},connector:this.connector})}await this.createNewSession(),this.status=s.CONNECTING,this.emit(a.CONNECTING,{adapter:p.WALLET_CONNECT_V1})}return new Promise((n,o)=>{if(!this.connector){o(w.notReady("Wallet adapter is not ready yet"));return}this.connector.on("modal_closed",async()=>(this.status=s.READY,this.emit(a.READY,p.WALLET_CONNECT_V1),o(new Error("User closed modal"))));try{this.connector.on("connect",async(i,h)=>(i&&this.emit(a.ERRORED,i),l.debug("connected event emitted by web3auth"),await this.onConnectHandler(h.params[0]),n(this.provider)))}catch(i){l.error("Wallet connect v1 adapter error while connecting",i),this.status=s.READY,this.rehydrated=!0,this.emit(a.ERRORED,i),o(i instanceof A?i:g.connectionError(`Failed to login with wallet connect: ${i?.message||""}`))}})}async getUserInfo(){if(!this.connected)throw g.notConnectedError("Not connected with wallet, Please login/connect first");return{}}async disconnect(){let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{cleanup:!1};await super.disconnectSession();const{cleanup:e}=t;if(!this.connector||!this.connected)throw g.notConnectedError("Not connected with wallet");await this.connector.killSession(),this.rehydrated=!1,e?(this.connector=null,this.status=s.NOT_READY,this.wcProvider=null):this.status=s.READY,await super.disconnect()}async addChain(t){var e,n;let o=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;super.checkAddChainRequirements(o);const i=(e=this.adapterOptions.adapterSettings)===null||e===void 0?void 0:e.networkSwitchModal;i&&await i.addNetwork({chainConfig:t,appOrigin:window.location.hostname}),await((n=this.wcProvider)===null||n===void 0?void 0:n.addChain(t)),this.addChainConfig(t)}async switchChain(t){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;super.checkSwitchChainRequirements(t,e),await this._switchChain({chainId:t.chainId},this.chainConfig),this.setAdapterSettings({chainConfig:this.getChainConfig(t.chainId)})}async _switchChain(t,e){var n,o;const i=(n=this.adapterOptions.adapterSettings)===null||n===void 0?void 0:n.networkSwitchModal;i&&await i.switchNetwork({currentChainConfig:e,newChainConfig:t,appOrigin:window.location.hostname}),await((o=this.wcProvider)===null||o===void 0?void 0:o.switchChain({chainId:e.chainId,lookup:!1,addChain:!1}))}async createNewSession(){var t,e;let n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{forceNewSession:!1};if(!this.connector)throw w.notReady("Wallet adapter is not ready yet");if(n.forceNewSession&&this.connector.pending&&await this.connector.killSession(),(t=this.adapterOptions)!==null&&t!==void 0&&(e=t.adapterSettings)!==null&&e!==void 0&&e.qrcodeModal){var o;await this.connector.createSession({chainId:parseInt(((o=this.chainConfig)===null||o===void 0?void 0:o.chainId)||"0x1",16)});return}return new Promise((i,h)=>{var u;if(!this.connector){h(w.notReady("Wallet adapter is not ready yet"));return}l.debug("creating new session for web3auth wallet connect"),this.connector.on("display_uri",async(d,E)=>{var m;if(d)return this.emit(a.ERRORED,g.connectionError("Failed to display wallet connect qr code")),h(d);const N=E.params[0];return this.updateAdapterData({uri:N,extensionAdapters:v}),(m=this.connector)===null||m===void 0||m.off("display_uri"),i()}),this.connector.createSession({chainId:parseInt(((u=this.chainConfig)===null||u===void 0?void 0:u.chainId)||"0x1",16)}).catch(d=>(l.error("error while creating new wallet connect session",d),this.emit(a.ERRORED,d),h(d)))})}async onConnectHandler(t){if(!this.connector||!this.wcProvider)throw w.notReady("Wallet adapter is not ready yet");if(!this.chainConfig)throw w.invalidParams("Chain config is not set");const{chainId:e}=t;l.debug("connected chainId in hex");let n=!1;if(typeof e=="string"?n=e!==this.chainConfig.chainId:typeof e=="number"&&(n=e!==parseInt(this.chainConfig.chainId,16)),n){var o,i,h;const u=P(f.EIP155,e)||{chainId:typeof e=="number"?`0x${e.toString(16)}`:e,displayName:"Unknown Network"},d=(o=this.adapterOptions.adapterSettings)===null||o===void 0?void 0:o.qrcodeModal;if(!d||d&&!((i=this.adapterOptions)!==null&&i!==void 0&&(h=i.adapterSettings)!==null&&h!==void 0&&h.skipNetworkSwitching))try{await this.addChain(this.chainConfig,!0),await this._switchChain(u,this.chainConfig),this.connector=this.getWalletConnectInstance()}catch(E){l.error("error while chain switching",E),await this.createNewSession({forceNewSession:!0}),this.emit(a.ERRORED,w.fromCode(5e3,`Not connected to correct network. Expected: ${this.chainConfig.displayName}, Current: ${u?.displayName||e}, Please switch to correct network from wallet`)),this.status=s.READY,this.rehydrated=!0;return}}await this.wcProvider.setupProvider(this.connector),this.subscribeEvents(this.connector),this.status=s.CONNECTED,this.emit(a.CONNECTED,{adapter:p.WALLET_CONNECT_V1,reconnected:this.rehydrated})}subscribeEvents(t){t.on("session_update",async e=>{e&&this.emit(a.ERRORED,e)}),t.on("disconnect",async(e,n)=>{e&&this.emit(a.ERRORED,e),l.debug("disconnect event emitted by web3auth"),await super.disconnect(),this.status=a.READY})}getWalletConnectInstance(){const t=this.adapterOptions.adapterSettings||{};return t.bridge=t.bridge||"https://bridge.walletconnect.org",new S(t)}}export{L as WalletConnectV1Adapter};
